from odoo import models, fields, api, _
from odoo.exceptions import ValidationError

class AdmissionCandidateStage(models.Model):
    _name = 'admission.candidate.stage'
    _description = "√âtape du Pipeline d'Admission"
    _order = 'sequence, id'

    name = fields.Char(
        string='Nom',
        required=True,
        translate=True,
    )

    code = fields.Char(
        string='Code',
        required=True,
        help="Code technique de l'√©tape",
    )

    description = fields.Text(
        string='Description',
        translate=True,
        help="Description d√©taill√©e de l'√©tape",
    )

    sequence = fields.Integer(
        string='S√©quence',
        default=10,
        help="Ordre d'affichage dans le pipeline",
    )

    form_template_id = fields.Many2one(
        'admission.form.template',
        string="Formulaire d'Admission",
        required=True,
        ondelete='cascade',
        help="Formulaire auquel cette √©tape est associ√©e",
    )

    is_default = fields.Boolean(
        string='√âtape par D√©faut',
        default=False,
        help="Si coch√©, les nouveaux candidats seront plac√©s dans cette √©tape",
    )

    fold = fields.Boolean(
        string='Pli√© dans Kanban',
        help="Si coch√©, cette √©tape sera pli√©e dans la vue Kanban",
    )

    active = fields.Boolean(
        default=True,
        help="Permet d'archiver une √©tape",
    )

    candidate_count = fields.Integer(
        string='Nombre de Candidats',
        compute='_compute_candidate_count',
    )

    color = fields.Integer(
        string='Couleur',
        help="Index de couleur pour la vue Kanban",
    )

    requirements = fields.Html(
        string='Pr√©requis',
        help="Conditions √† remplir pour cette √©tape",
        sanitize=True,
        strip_style=True,
    )

    @api.constrains('is_default', 'form_template_id')
    def _check_default_stage(self):
        """V√©rifie qu'il n'y a qu'une seule √©tape par d√©faut par formulaire."""
        for stage in self:
            if stage.is_default:
                default_stages = self.search([
                    ('form_template_id', '=', stage.form_template_id.id),
                    ('is_default', '=', True),
                    ('id', '!=', stage.id),
                ])
                if default_stages:
                    raise ValidationError(_(
                        "Il ne peut y avoir qu'une seule √©tape par d√©faut par formulaire. "
                        "Le formulaire %(form)s a d√©j√† l'√©tape %(stage)s comme √©tape par d√©faut.",
                        form=stage.form_template_id.name,
                        stage=default_stages[0].name
                    ))

    @api.depends('form_template_id')
    def _compute_candidate_count(self):
        """Calcule le nombre de candidats dans chaque √©tape."""
        candidates = self.env['admission.candidate'].read_group(
            [('stage_id', 'in', self.ids)],
            ['stage_id'],
            ['stage_id']
        )
        result = {x['stage_id'][0]: x['stage_id_count'] for x in candidates}
        for stage in self:
            stage.candidate_count = result.get(stage.id, 0)

    @api.model
    def create_default_stages(self, form_template):
        """Cr√©e les √©tapes par d√©faut pour un nouveau formulaire."""
        default_stages = [
            {
                'sequence': 1,
                'name': 'üÜï Nouvelle candidature',
                'code': 'new',
                'description': 'Candidat fra√Æchement import√©',
                'is_default': True,
            },
            {
                'sequence': 2,
                'name': 'üìã Dossier √† v√©rifier',
                'code': 'pending_review',
                'description': 'En attente de validation des pi√®ces',
            },
            {
                'sequence': 3,
                'name': '‚úÖ Dossier complet',
                'code': 'complete',
                'description': 'Pr√™t pour √©valuation',
            },
            {
                'sequence': 4,
                'name': 'üßê En cours d\'√©valuation',
                'code': 'under_review',
                'description': '√âtude en commission',
            },
            {
                'sequence': 5,
                'name': 'üü° Liste d\'attente',
                'code': 'waitlist',
                'description': 'En attente de d√©cision',
            },
            {
                'sequence': 6,
                'name': 'üìû Entretien programm√©',
                'code': 'interview',
                'description': 'Entretien pr√©vu',
            },
            {
                'sequence': 7,
                'name': 'üü¢ Pr√©-s√©lectionn√©',
                'code': 'preselected',
                'description': 'Accept√© sous condition',
            },
            {
                'sequence': 8,
                'name': 'üèÅ Accept√© d√©finitivement',
                'code': 'accepted',
                'description': 'Admission confirm√©e',
            },
            {
                'sequence': 9,
                'name': '‚ùå Rejet√©',
                'code': 'rejected',
                'description': 'Candidat non retenu',
                'fold': True,
            },
            {
                'sequence': 10,
                'name': 'üì¶ Archiv√©',
                'code': 'archived',
                'description': 'Hors campagne ou candidature report√©e',
                'fold': True,
            },
        ]

        for stage_data in default_stages:
            stage_data['form_template_id'] = form_template.id
            self.create(stage_data) 